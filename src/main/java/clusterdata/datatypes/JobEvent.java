package clusterdata.datatypes;

import java.io.Serializable;

/**
 * A JobEvent describes a job event in a job's lifecycle. It consists of the following fields:
 *
 * - the jobId, i.e. a unique identifier of the job this event corresponds to
 * - the timestamp of when the event happened
 * - the eventType, which corresponds to an event transition code
 * - the userName of the job submitter
 * - the jobName
 * - the logicalJobName. Note that job names generated by different executions of the same program will usually have the same logical name
 * - the schedulingClass that roughly represents how latency-sensitive the job is
 * - a missingInfo field, indicating whether the record is a synthesized replacement
 */

public class JobEvent implements Comparable<JobEvent>, Serializable {

    public JobEvent(long jobId, long timestamp, EventType eventType, String userName,
                    String jobName, String logicalJobName, int schedulingClass, String missingInfo) {

        this.jobId = jobId;
        this.timestamp = timestamp;
        this.eventType = eventType;
        this.username = userName;
        this.jobName = jobName;
        this.logicalJobName = logicalJobName;
        this.schedulingClass = schedulingClass;
        this.missingInfo = missingInfo;
    }

    public long jobId;
    public long timestamp;
    public EventType eventType;
    public String username;
    public String jobName;
    public String logicalJobName;
    public int schedulingClass;
    public String missingInfo;

    public JobEvent() {
    }

    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(jobId).append(",");
        sb.append(timestamp).append(",");
        sb.append(eventType).append(",");
        sb.append(username).append(",");
        sb.append(jobName).append(",");
        sb.append(logicalJobName).append(",");
        sb.append(schedulingClass);
        missingInfo = (!missingInfo.equals("")) ? "," + missingInfo : missingInfo;
        sb.append(missingInfo);

        return sb.toString();
    }

    public static JobEvent fromString(String line) {
        String [] tokens = line.split(",");
        if (tokens.length != 8) {
            throw new RuntimeException("Invalid job event record: " + line);
        }

        JobEvent jEvent = new JobEvent();

        try {
            jEvent.jobId = Long.parseLong(tokens[2]);
            jEvent.timestamp = Long.parseLong(tokens[0]);
            jEvent.eventType =EventType.valueOf(Integer.parseInt(tokens[3]));
            jEvent.username = tokens[4];
            jEvent.jobName = tokens[6];
            jEvent.logicalJobName = tokens[7];
            jEvent.schedulingClass = Integer.parseInt(tokens[5]);
            jEvent.missingInfo = tokens[1];
        } catch (NumberFormatException nfe) {
            throw new RuntimeException("Invalid job event record: " + line, nfe);
        }
        return jEvent;

    }

    @Override
    public int compareTo(JobEvent other) {
        if (other == null) {
            return 1;
        }
        return Long.compare(this.timestamp, other.timestamp);
    }

    @Override
    public int hashCode() {
        return (int)this.jobId;
    }

    @Override
    public boolean equals(Object other) {
        return other instanceof JobEvent &&
                this.jobId == ((JobEvent) other).jobId;
    }
}
